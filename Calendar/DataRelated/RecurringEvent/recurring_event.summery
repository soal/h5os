1. Workflow of calendar worker machanic.
> work flow of expand-recurring-event by signal 'monthChange'.
The entrance point of main thread is serviceController, which is only used in app.js and provider/abstract.js, in the form of serviceController.stream.
controller/service extends worker/manager, and add 'caldav' worker at js/caldav_worker.js, and this is all what controller/service done,almost all the method is extended from worker/manager.
All the work of sending and receiving message from worker is done by worker/manager, the most important method provided by worker/manager is stream and request.
The stream method returns a Responder object named stream with an important method stream.request, the follow thing is done in this method.
> analyze of worker/manager.stream
The data send to worker is reorganized by arguments received.
initialize an Responder object named stream, and add function request to stream, at last return the stream.
The logic of stream.request is: _ensureActiveWorker, _startWorker, add listener to the pending queue, postMessage to the worker.
_ensureActiveWorker(role) -> self._addPending -> worker.instance.postMessage

2. The process of argument transfer from provider/abstract to service/caldav.js, take abstract.ensureRecurrencesExpanded for example.
ensureRecurrencesExpanded -> _expandComponents
provicer/abstract._expandComponents:
  @'caldav' is a role string
  @'expandComponents' is signal name
  @comps are iCalComponent string array
  @options = {
    maxDate: Calc.dateToTransport(maxDate)
  };
  var stream = this.service.stream(
    'caldav',
    'expandComponents',
    comps,
    options
  );
worker/manager.stream
  @id self increment
  @role: 'caldav'
  @payload: all parameters from abstract._expandComponents except 'caldav'
  var data = {
    id: this._lastId++,
    role: role,
    payload: args,
    type: 'stream'
  };
  worker.instance.postMessage(['_dispatch', data]);
worker/thread._initEvents
  self.roles[data.role].respond(
    data.payload,
    self._remoteEmitter(data.id),
    callback
  );
  > give value to the variable <
  self.roles['caldav'].respond(
    ['expandComponents', comps, options],
    _remoteEmitter: function(data.id) {
      var self = this;
      return {
        emit: function emitRemote() {
          var args = Array.prototype.slice.call(arguments);
          self.worker.postMessage([id + ' stream'].concat(args));
        }
      };
    },
    callback: function _requestCallback(data.id) {
      var args = Array.prototype.slice.call(arguments, 1);
      args.unshift(id + ' end');
      if (args[1] instanceof Error) {
        args[1] = this._wrapError(args[1]);
      }
      this.worker.postMessage(args);
    }
  )
js/responder.respond
  respond: function respond(json) {
    var event = Responder.parse(json);
    var args = Array.prototype.slice.call(arguments).slice(1);
    this.emit.apply(this, event.concat(args));
    return event;
  },
  > give value to the emit function <
  this.emit(['expandComponents', comps, options, self._remoteEmitter(data.id), self._requestCallback(data.id)]);

service/caldav.expandComponents
  @stream: 
  {
    emit: function emitRemote() {
      var args = Array.prototype.slice.call(arguments);
      self.worker.postMessage([id + ' stream'].concat(args));
    }
  }
  expandComponents: function(components, options, stream, callback)
service/caldav.expandRecurringEvent
  @ical: component
  @options: {
              maxDate: options.maxDate,
              iterator: component.iterator,
              minDate: component.lastRecurrenceId
            }
  @stream: streams
  expandRecurringEvent(ical, localOpts, stream, (err, iter, lastRecurId, uid) => {
  });
service/caldav.parseEvent
  @component: iCalendar string
  @event: ICAL.Event
  parseEvent(component, (err, event) => {
  });

3. Something about recurring_events
# the logic of recurring event in main thread
controllers/recurring_events is only required and initialized in app.js, and listen for signal 'monthChange'.
> js/controllers/recurring_events.js
'monthChange' -> queueExpand -> expand -> _expandProvider -> provider/abstract.ensureRecurrencesExpanded
> js/provider/abstract.js
ensureRecurrencesExpanded -> icalComponents.findRecurrencesBefore -> _expandComponents -> 
# _expandComponents is an important method in main thread.
> caldav_pull_events is used to receive data by stream responder and presist them.
> stream is a responder, the function stream.request is used to start the worker, initial the worker receiver on pendding queue, send message to worker, and then waitting for respond data. when the data received is send to caldav_pull_events by stream listener.
> code below
  var stream = this.service.stream(
    'caldav',
    'expandComponents',
    comps,
    options
  );
  var pull = new CaldavPullEvents(
    stream,
    {
      account: account,
      calendar: calendar,
      app: this.app,
      stores: [
        'busytimes', 'alarms', 'icalComponents'
      ]
    }
  );
  stream.request(function(err) {
    callback(null, pull);
  });
## The middleware of connection
# worker/manager is main-thread side middleware. stream is used to transfer data from worker/manager to its listener(caldav_pull_events).
  stream: function(role /*, args...*/) {
    var args = Array.prototype.slice.call(arguments, 1);
    var stream = new Responder();
    var self = this;
    var data = {
      id: this._lastId++,
      role: role,
      payload: args,
      type: 'stream'
    };
    stream.request = function(callback) {
      var worker = self._ensureActiveWorker(role);
      self._addPending(worker, {
        id: data.id,
        stream: stream,
        callback: callback
      });
      worker.instance.postMessage(['_dispatch', data]);
    };
    return stream;
  }
# worker/thread is the worker-thread side middleware
> The data is received in caldav_worker, and send to thread immediately.
self.addEventListener('message', function onMessage(msg) {
  // caldav is instance of service/caldav.js
  if (typeof(caldav) !== 'undefined') {
    return self.thread.respond(msg.data);
  }
});
> worker/thread is entrance point of worker thread.
worker/thread will listen for 'dispatch' signal after it was initialized, and then send the data received and two append to it role(now, there is only one role 'caldav' and its worker is service/caldav). The method _remoteEmitter and _requestCallback is called by service and send the data to main thread(worker/manager) using method postMessage.
  _remoteEmitter: function(id) {
    var self = this;
    return {
      emit: function emitRemote() {
        var args = Array.prototype.slice.call(arguments);
        self.worker.postMessage([id + ' stream'].concat(args));
      }
    };
  }, 
  _requestCallback: function(id) {
    var args = Array.prototype.slice.call(arguments, 1);
    args.unshift(id + ' end');
    if (args[1] instanceof Error) {
      args[1] = this._wrapError(args[1]);
    }
    this.worker.postMessage(args);
  },
  this.on('_dispatch', function(data) {
      var callback = self._requestCallback.bind(
        self, data.id
      );
      if (data.type && data.type === 'stream') {
        self.roles[data.role].respond(
          data.payload,
          self._remoteEmitter(data.id),
          callback
        );
      } else {
        self.roles[data.role].respond(
          data.payload, callback
        );
      }
    });
  },
# service/caldav is added to worker/thread.roles in worker/initialize, and thread.roles.caldav is used to send data from service/caldav to worker/thread, at last the data wrapped and send to main thread.
  var thread = self.thread = new Thread(window);
  thread.addRole('caldav');
  window.console = new thread.console('worker');
  require(['service/caldav'], (CaldavService) => {
    // Lazily loaded so that we can prime environment first.
    debug('Will create new caldav service...');
    self.caldav = new CaldavService(thread.roles.caldav);
  });
> service/caldav is where the main operation done in worker thread, the operation from main thread is send to worker/thread, and then send to service/caldav by thread.role responder, the result is send to main thread in service/caldav by function _remoteEmitter and _requestCallback which is past from worker/thread.

> worker/manager <-> worker/thread <-> service/caldav.js

4. Some important functions about recurring event.
#provider/abstract.ensureRecurrencesExpanded -> _expandComponents -> service/caldav.expandComponents
/**
 * Ensures recurring events are expanded up to the given date.
 */
ensureRecurrencesExpanded: function(maxDate, callback) {
});
/**
 * Ensures recurring events are expanded up to the given date using iCalString Array.
 */
_expandComponents: function(calendarId, comps, options, callback) {
  var stream = this.service.stream(
    'caldav',
    'expandComponents',
    comps,
    options
  );
  var pull = new CaldavPullEvents(
    stream,
    {
      account: account,
      calendar: calendar,
      app: this.app,
      stores: [
        'busytimes', 'alarms', 'icalComponents'
      ]
    }
  );
  stream.request(function(err) {
    if (err) {
      callback(err);
      return;
    }
    callback(null, pull);
  });
}

#service/caldav.js
> expandComponents -> expandRecurringEvent -> parseEvent
/**
 * Parse an ical data/string into primary
 * some parameter are added to options, other work is done by parseEvent.
 */
expandRecurringEvent: function(component, options, stream, callback) {
}
/**
 * Parse an ical data/string into primary.
 * @ component is an iCalString.
 * @ event is an instance of ICAL.Event, with some important method, such as, iterator, getOccurrenceDetails.
 */
parseEvent(component, function(err, event) {
});
> streamEventsFromLocal
parseEvent by ical, and get ICAL.Event, 
process the event by _formatEventFromLocal, and get a result.
pass the result to caldav_pull_event by 'event' signal

5. all-day recurring event and non-all-day recurring event.
The format of recurrenceId in exception event is depended on whether its recurring event is all-day or not.
There are many differences: 
> The property of ICAL.Time:
  if (parentModel.isAllDay) {
    eventComp += 'RECURRENCE-ID;VALUE=DATE:' +
      parentModel.startDate.toString('yyyyMMdd') + '\r\n';
    eventComp += 'TRANSP:TRANSPARENT\r\n';
  } else {
    eventComp += 'RECURRENCE-ID;TZID=' + tzid + ':' +
      parentModel.startDate.toString('yyyyMMddTHHmmss') + '\r\n';
    eventComp += 'TRANSP:OPAQUE\r\n';
  }
> The format of transport time
Transport time and JS Date object.
  recurrenceId = {
    'tzid': 'America/Adak',
    'offset': -36000000,
    'utc': 1452225600000
  },
  recurrenceId = {
    'tzid':'floating',
    'offset':0,
    'utc':1464652800000,
    'isDate':true
  }


6. The logic of recurring event
> If calendarId or repeat is changed, updateEvent this only is not allowed.
> After chagne exception event to recurring event, the exception event still exist.
> updateEventAllFuture:
whether the new updated recurring event all future belongs to the main recurring event: change startTime or recurring rule.
if they are belong to the same event, and will be deleted or update together.
else the exception event of main recurring event will be rewrited by new recurring event.

7. expand by month
The point need to notice when change the expanding window from lastRecurrenceId to monthSpan:
> the until of VEVENT will affect the exdate property.
> edit all future will affect the busytimes of former edit all future and exdate busytimes.
> google calendar应该没有event这个概念。
> add component is called two times, the component is added in function handleEventSync again.
> service/ical_recur_expansion.js, the unixtime is used for ICAL.Time.compare. For the initialization of ICAL.Time, the name of timezone can be used only after it is registered in ICAL.TimezoneService.
So I think register it ahead is necessary.      
var id = zone.tzid;
if (!ICAL.TimezoneService.has(id)) {
  ICAL.TimezoneService.register(id, zone);
}

getRecurringVEvent
  var vEvents = vCalendar.getAllSubcomponents('vevent').forEach((component) => {
    return new ICAL.Event(component);
  }).filter((event) => {
    return event.isRecurring();
  });
  if (!vEvents) {
    return null;
  }
  return vEvents[0];