# 有时会出现一些奇怪的现象，可能是由于前面的js执行处错误导致。
当js执行错误后会输出错误并停止后续js的执行

# Summery about event list
The former page of event list:
month-view:     router.go('/event/list/');
modify-event:   pathToGo = '/event/list/' + busytimeOrId._id; router.go(pathToGo);
event-detail:   action: () => {
                  router.go('/event/list/' + this.busytimeId);
                }

# something about keydown event.
when press csk in h5-dialog textInput, only e.keyCode is correct, and e.key is undefined.
if (e.keyCode === KeyboardEvent.DOM_VK_RETURN) {
  this.elements.dialogTextInput.blur();
}
In some condition, e.keyCode is zero, and a.key is correct, the use of e.key as below:
switch(evt.key) {
  case 'BrowserBack':
    break;
  case 'ArrowLeft':
    break;
  case 'ArrowRight':
    break;
  case 'ArrowDown':
    break;
  case 'ArrowUp':
    break;
  case 'AcaSoftLeft':
    evt.preventDefault();
    break;
  case 'Enter':
    break;
  case 'AcaSoftRight':
    break;
}

# Something about month view navigation.
> Something about Refactor month view navigation.
When the value of selectedDay is changed, if selected day is not the same as previous one, the signal 'selectedDayChange' will emit, and the function single_month -> _onSelectedDayChange will be exexuted. Some actions is done in this function: set focus on selectedDay, add 'selected' to class list of selected day.
> As timeController.selectedDay is set in app.js, on the first active of month view no 'selectedDayChange' will emit, so We need to set it manualy. Notice: timeController.selectedDay is set in app.js now.
> Something need to care.
In monthly view, if we add this.controller.move(date); in KeyDownEvent callback, focus error may happen. The error is caused by the incorrect execute sequence of monthChange callback and navigation_map, the callback of monthChange should occur before navigation_map, as the selector of section.active is generated by monthChange callback.
> white color and ar(--highlight-color) background-color is set by selected
  section.month .selected {
    color: white;
    background-color: var(--highlight-color);
  }
  the font color of present day is set by
  section.month .present {
    color: var(--highlight-color);
  }
  class present is set in views/month_day.jsby calc.relativeState

# Something about timeController(js/controller/time.js)
> There are two important variables in timeController: position and selectedDay
position is changed by timeController.move(), selectedDay is changed by value set: timeController.selectedDay = .
dayChange, monthChange, yearChange is emitted by position change,
selectedDayChange is emitted by selectedDay change.
> mostRecentDayType is change as the value is set to position or selectedDay. The value of mostRecentDay is related with mostRecentDayType.
  get mostRecentDay() {
    if (this.mostRecentDayType === 'selectedDay') {
      return this.selectedDay;
    } else {
      return this.position;
    }
  },
> summery of emit signal
dayChange, monthChange, yearChange
view/month._changeSelectedDay
app._initUI
selectedDayChange
view/month._changeSelectedDay
app._initUI
> Something new added
presentDay and related signal is added for listen present day change, there are still thing not correct fot classList of month_day if change system date, but it has no influence for APP.

# sync calendar time with system time, which is usually changed by settings.
At beginning, the calendar app will restart when moztimechange, it will cause calendar app frequently restart when SIM card is inserted.
Now, it will check if timezone is changed in moztimechange listener, if timezone is changed, calendar will restart, else presentDay will update. If current is not the same as previous one, current calendar day will update.
All action above is respond to timechange manually, app._syncTodayDate is used for normal time change.

# Visual Cursor需要browser权限

# Calendar List相关页面：
  -> Settings -> Default Calendar
  -> Calendar to Display
  -> Add Event -> Calendar
  -> Setup Calendar
> More info about Calendar List.
Calendar To Display: Offline Account -> Offline Calendar; Online Account -> Online Calendar
Modify Event: Offline Account -> Offline Calendar
Setup Calendar: Offline Calendar; Online Account.
AdvancedSetting -> default calendar: Offline Account -> Offline Calendar
> The form of Calendar List and Account List: 
Calendar To Display: ul and li
Advanced Settings -> Default Calendar
Modify Event: Select
Setup Calendar: 
The value of ModifyEvent is changed follow Advanced Settings.

# Location of index db: /data/local/storage/default/

# The fail of database operation maybe is caused by personal db operation, such as add or delete calendar by script.

# Some property of Object can not outputed by JSON.stringify(Object), such as the data.params in onactive of a page.

# Some thing need to notice about toast.
Sometimes, global component such as toast dialog optionmenu, not work as expected. There may be some reasons: z-index is smaller than current section; the section of global component is placed after current section.

# Summery about Calendar App:
1. The use of global toast.
this.app.toast.show({message: _('error-prior-to-1970')});
2. the class past present and future is set in month_day.js
3. Some files is not used any more.
settings.js   is replaced by advanced_settings.js;
view_event.js is replaced by event_detail.js

# The logic of modify event
(_createModel and _loadModel of event_base is the entry point of add event and modify event.)
modify_event
primary ->
formData ->
_persistEvent ->
store.providerFor ->
fetchProvider ->
verifyCaps ->
persistEvent
js/event_mutation.js

# The logic of save Notification
store/alarm.js
_processQueue ->
workQueue ->


8. The log of Notification and Alarm
> When add an event with alert(alarm), the related alarm object will be added to MozAlarmManager Queue, and the alarm will stay in MozAlarmManager even the event is deleted.
> When the alarm is triggered, the code will detect whether the alarm-related busytime or event exist. The Notification will not send if realted event or busytime not exist, so it will work ok even the alarm in  MozAlarmManager Queue is not correct.(js/controller/notification.js)
> As the logic of UX, when the busytime is deleted the notification bar of system app will be remove.
> The workflow of add alarm to AlarmManager
  var alarmTrans = alarmStore.db.transaction(
    ['alarms'],
    'readwrite'
  );
  alarmStore.persist(alarm, alarmTrans);
  The action is done by alarmTrans complete listener.
  _addDependents -> trans.addEventListener('complete', this._processQueue);
  _processQueue -> workQueue -> _moveAlarms -> dispatchAlarms ->
      navigator.mozAlarms.add(
        Calc.dateFromTransport(alarm.triggered),
        timezone,
        alarm
      )
> The deletion of obsolute notification is done in store/busytime.js. maybe it is better sync notification operation with alarm in store/alarm.js, but it is hard to get busytimeId in _removeDependents of store/alarm.js

9. unknow Exception
Maybe caused by transaction of add data to database.

10.
An IndexedDB transaction that was not yet complete has been aborted due to page navigation.

11. The logic of event_base
event_base is super class of modify_event, event_base does not have method onactive.
The active of modify_event: call onactive of event_base, add keydown event listener.
The view.onactive is called as event_base does not have function onactive.
The first entry point of event base is dispatch.
  onactive: function() {
    EventBase.prototype.onactive.apply(this, arguments);
    this.element.addEventListener('keydown', this._keyDownHandler);
  },
  onactive: function() {
    // seen can be set to anything other than false to override this behaviour
    if (this.seen === false) {
      this.onfirstseen();
    }

    // intentionally using 'in'
    if ('dispatch' in this) {
      this.dispatch.apply(this, arguments);
    }

    this.seen = true;
    if (this.element) {
      this.element.classList.add(this.activeClass);
    }
  },

12. The logic of primary function(listener of saveKey)
-> formData(get the data of form)
  var fields = {
    title: this.getEl('title').value,
    location: this.getEl('location').value,
    repeat: this.getEl('repeat').value,
    calendarId: this.getEl('calendarId').value,
    description: this.getEl('description').value,
    isAllDay: this.getEl('allday').checked,
    recurrenceId: '',
    timeStamp: ,
    isRecurring: ,
    startDate: ,
    endDate: ,
    alarms: []
  };
-> this.event.updateAttributes(update event model using form data)
-> save logic
1. if the event isSaved, then update this event.
> if (event.remote.isRecurring && originalRepeat !== 'never')
    current event is recurring, and former is recurring.
    updateEventThisOnly(is disabled when the repeat properties is not the same)
    updateEventAllFuture
  else
    (current event is normal or former is normal)
    [current event is normal, former is recurring. then delete all event except today]
    [current event is normal, former is normal. then to updateEvent]
    [current event is recurring, former is normal. then to updateEvent]
    updateEvent
    if (event.data.remote.isRecurring && originalRepeat === 'never')
      update from normal event to recurring event.
    else
      update normal event

2. if the event isNotSaved, then create a new event.
  createEvent

13. The value shown in modify_event, event_list and event_detail.
> modify_event:
value of event, with startDate and endDate set by current time.

> event_list:
value of busytime

> event_detail:
normal: value of Event.
recurring: value of Event, but DateTime is from Busytime.

14. something hard to understand in H5OS: 
timezone is American/Adak
date = new Date('2016-03-14T22:00:00.000Z')
Date 2016-03-14T22:00:00.000Z
date.toLocaleString()
"Mon Mar 14 13:00:00 2016"
date2 = new Date('2016-03-07T22:00:00.000Z');
Date 2016-03-07T22:00:00.000Z
date2.toLocaleString()
> The 
11:59AM -> 12:00PM -> 12:59PM -> 01:00PM -> 11:59PM -> 12:00AM(next day)

15. The date rule in Calendar
The format of busytime and event on both local and online
var cDate = {
  start: {
    tzid: "Asia/Baghdad",
    offset: 10800000,
    utc: 1457647200000
  },
  startDate: new Date('2016-03-10T19:00:00.000Z')
}
The mean of properties in cDate:
> local date (current time):
2016-03-10T22:00:00.000
> cDate.start.utc (if utc time is local time, how many milliseconds from 1970.01.01)
new Date(cDate.start.utc)
Date 2016-03-10T22:00:00.000Z
> cDate.startDate (the time of current utc time)
cDate.startDate (when local)
Date 2016-03-10T19:00:00.000Z
> the functions used to transfor between startDate and start is:
  > service.caldav.formatICALTime
    from startDate to start.
  > Calc.dateToTransport
    from start to startDate.
# The date in iCalendar string and ICAL component is local time.

exports.dateToTransport = function(date) {
  var result = Object.create(null);
  var utc = Date.UTC(
    date.getFullYear(),
    date.getMonth(),
    date.getDate(),
    date.getHours(),
    date.getMinutes(),
    date.getSeconds(),
    date.getMilliseconds()
  );
  var localUtc = date.valueOf();
  var offset = utc - localUtc;
  result.utc = utc;
  result.offset = offset;
  return result;
};
the result of is dateToTransport(date)
{utc: 1451672581624, offset: -36000000 }
utc是指当utc是当前本地时间时需要走多少毫秒。
> The relations between Transport time, Local time, UTC time
start = {
  "tzid":"Asia/Shanghai",
  "offset":28800000,
  "utc":1465520400000
}
startDate = "2016-06-09T17:00:00.000Z"
> date = new Date(1465520400000)
< Date 2016-06-10T01:00:00.000Z
> date.toString()
< "Fri Jun 10 2016 09:00:00 GMT+0800 (CST)"
> date2 = new Date('2016-06-09T17:00:00.000Z')
< Date 2016-06-09T17:00:00.000Z
> date2.toString()
< "Fri Jun 10 2016 01:00:00 GMT+0800 (CST)"

16. date format transfer.
> service/caldav.js 
formatInputTime: from transportTime to ICALTime
> ICALTime.toJSDate: from ICALTime to JSDate.
> ical.js
dateToTransport: from JSDate to transportTime.